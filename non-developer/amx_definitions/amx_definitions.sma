/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>

#define PLUGIN "amx_dictionary"
#define VERSION "1.2"
#define AUTHOR "Hoodie"

#define NAME "db.ini"

#define DEFNACCESS ADMIN_MENU
#define LOOKACCESS 0
#define REDEFACCESS ADMIN_BAN
#define DELACCESS ADMIN_BAN
#define LISTACCESS ADMIN_MENU

new filepath [64], filename[64]

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_clcmd("say", "said", 0, "checks say for a query/define")
	register_concmd("dict_define", "define", DEFNACCESS, "defines something")
	//register_concmd("dict_lookupu", "lookupu", , "queries a definition")
	register_concmd("dict_lookup", "lookup", LOOKACCESS, "queries a definition.")
	register_concmd("dict_redefine", "redefine", REDEFACCESS, "redefines a definition")
	register_concmd("dict_lookupq", "lookupq", LOOKACCESS, "quietly queries (no error if not found).")
	register_concmd("dict_delete", "delete", DELACCESS, "deletes a definition")
	register_concmd("dict_list", "list", LISTACCESS, "lists all terms")
}

public said(id,level,cid)
{
	new definition [128]
	read_args(definition, 127)
	if(strfind(definition, "!define",0,0)!=-1)
	{			
		replace(definition, 127, "!define", "dict_define")
		remove_quotes(definition)
		client_cmd(id, definition)
	}
	else
	{
		if(strfind(definition, "!lookup",0,0)!=-1)
		{
			replace(definition, 127, "!lookup", "dict_lookup")
			client_cmd(id, definition)
		}
		else
		{
		if(containi(definition, "?") < 32&&containi(definition, "?")>-1) // if the user has possibly queried a definition
			{
				new term [32], useless [96], cmd [46]					
				strtok(definition, term, 31, useless, 95, '?')
				format(cmd, 45, "dict_lookupq %s", term)
				client_cmd(id, cmd)
			}
			else
			{
				if(strfind(definition, "!redefine",0,0)!=-1)
				{
					replace(definition, 127, "!redefine", "dict_redefine")
					remove_quotes(definition)
					client_cmd(id, definition)
				}
				else
				{
					if(strfind(definition, "!delete",0,0)!=-1)
					{
						replace(definition, 127, "!delete", "dict_delete")
						remove_quotes(definition)
						client_cmd(id,definition)
					}
					else
					{
						if(strfind(definition, "!undefine",0,0)!=-1)
						{
							replace(definition, 127, "!undefine", "dict_delete")
							remove_quotes(definition)
							client_cmd(id,definition)
						}
						else
						{
							if(strfind(definition, "!list",0,0)!=-1)
							{
								client_cmd(id,"dict_list")
							}
						}
					}
				}
			}
		}
	}
	return PLUGIN_CONTINUE	
	/*if(access(id, ADMIN_USER))
	{
		if(strfind(definition, "!lookup", 0,0) != -1)
		{
			replace(definition, 127, "!lookup", "dict_lookupu")
			client_cmd(id, definition)
		}
		return PLUGIN_CONTINUE
	}*/	
	//return PLUGIN_CONTINUE
}

public list(id,level,cid)
{
	if(!cmd_access(id,level,cid,1))
	return PLUGIN_HANDLED
	get_configsdir(filepath, 63)
	format(filename, 31, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in query: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn [2], line=0, linecont [96]
	iLen2=file_size(filename,1)
	client_print(id,print_chat, "[Dictionary %s] A list of terms is being displayed in your console.", VERSION)
	client_print(id,print_console, "[Dictionary %s] Terms list follow: %i terms total.", VERSION, iLen2)
	for(line=0;line<iLen2;line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		strtok(linecont, term, 31, defn, 1, '*')
		client_print(id, print_console, term)
	}
	return PLUGIN_HANDLED
}

public delete(id,level,cid)
{
	if(!cmd_access(id,level,cid,2))
	return PLUGIN_HANDLED
	new argv1 [32]
	read_argv(1,argv1,31)
	//client_print(id,print_chat, "search string: %s", argv1)
	get_configsdir(filepath,63)
	format(filename, 31, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in query: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn[64], line=0, linecont[96], found = 0
	iLen2=file_size(filename, 1)
	//client_print(id,print_chat,"Searching now! - length = %i", iLen2)
	for(line=0; line<iLen2; line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		//client_print(id,print_chat,"%s - %i - %i", linecont, line, iLen)
		strtok(linecont, term, 31, defn, 63, '*')
		if(equali(term, argv1))
		{	
			//client_print(id,print_chat, "found something.")
			//client_print(0, print_chat, "[Dictionary %s] %s = %s", VERSION, term, defn)
			found = 1
			break
		}
	}
	if(found == 1)
	{
		write_file(filename, "", line)
	}
	else
	{	
		client_print(id, print_chat,"[Dictionary %s] Error: Term not found.", VERSION)
	}
	return PLUGIN_HANDLED
}

public redefine(id,level,cid)
{
	if(!cmd_access(id,level,cid, 3))
	return PLUGIN_HANDLED
	new argv1[32]
	new argv2[64]
	new definition [96]
	read_argv(1,argv1,63)
	read_argv(2,argv2,63)
	get_configsdir(filepath, 63)
	format(filename, 63, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in define: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn[64], line=0, linecont[96]
	iLen2=file_size(filename, 1)
	//client_print(id,print_chat,"Searching now! - length = %i", iLen2)
	for(line=0; line<iLen2; line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		//client_print(id,print_chat,"%s - %i - %i", linecont, line, iLen)
		strtok(linecont, term, 31, defn, 63, '*')
		if(equali(term, argv1))
		{	
			//client_print(id,print_chat, "Entry for %s being overwritten!", argv1)
			break
		}
	}
	format(definition, 95, "%s*%s", argv1, argv2)
	write_file(filename, definition, line)
	client_print(0,print_chat,"[Dictionary %s] Entry successfully rewritten: %s = %s.", VERSION, argv1, argv2)
	return PLUGIN_HANDLED
}
public define(id,level,cid)
{
	if(!cmd_access(id,level,cid, 3))
	return PLUGIN_HANDLED
	new argv1[32]
	new argv2[64]
	new definition [96]
	read_argv(1,argv1,63)
	read_argv(2,argv2,63)
	get_configsdir(filepath, 63)
	format(filename, 63, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in define: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn[64], line=0, linecont[96]
	iLen2=file_size(filename, 1)
	//client_print(id,print_chat,"Searching now! - length = %i", iLen2)
	for(line=0; line<iLen2; line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		//client_print(id,print_chat,"%s - %i - %i", linecont, line, iLen)
		strtok(linecont, term, 31, defn, 63,'*')
		if(equali(term, argv1))
		{	
			client_print(id,print_chat, "[Dictionary %s] Entry for %s exists already. Try !redefine to redefine it.", VERSION, argv1)
			return PLUGIN_HANDLED
		}
	}
	format(definition, 95, "%s*%s", argv1, argv2)
	write_file(filename, definition, -1)
	client_print(0,print_chat,"[Dictionary %s] Entry successfully stored: %s = %s.", VERSION, argv1, argv2)
	return PLUGIN_HANDLED
}

public lookup(id,level,cid)
{
	if(!cmd_access(id,level,cid,2))
	return PLUGIN_HANDLED
	new argv1 [32]
	read_argv(1,argv1,31)
	//client_print(id,print_chat, "search string: %s", argv1)
	get_configsdir(filepath,63)
	format(filename, 31, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in query: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn[64], line=0, linecont[96], found = 0
	iLen2=file_size(filename, 1)
	//client_print(id,print_chat,"Searching now! - length = %i", iLen2)
	for(line=0; line<iLen2; line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		//client_print(id,print_chat,"%s - %i - %i", linecont, line, iLen)
		strtok(linecont, term, 31, defn, 63, '*')
		if(equali(term, argv1))
		{	
			//client_print(id,print_chat, "found something.")
			client_print(0, print_chat, "[Dictionary %s] %s = %s", VERSION, term, defn)
			found = 1
			break
		}
	}
	if(found == 0)
	{	
		client_print(id, print_chat,"[Dictionary %s] Error: Term not found.", VERSION)
	}
	return PLUGIN_HANDLED
}

public lookupq(id,level,cid) // this version is for ? statements - if a term doesn't exist, who cares?
{
	if(!cmd_access(id,level,cid,2))
	return PLUGIN_HANDLED
	new argv1 [32]
	read_argv(1,argv1,31)
	//client_print(id,print_chat, "search string: %s", argv1)
	get_configsdir(filepath,63)
	format(filename, 31, "%s/%s", filepath, NAME)
	if(!file_exists(filename))
	{
		client_print(id,print_chat,"[Dictionary %s] Error in query: db.ini file not found.", VERSION)
		return PLUGIN_HANDLED
	}
	new iLen, iLen2, term[32], defn[64], line=0, linecont[96]//, found = 0
	iLen2=file_size(filename, 1)
	//client_print(id,print_chat,"Searching now! - length = %i", iLen2)
	for(line=0; line<iLen2; line++)
	{
		read_file(filename, line, linecont, 95, iLen)
		//client_print(id,print_chat,"%s - %i - %i", linecont, line, iLen)
		strtok(linecont, term, 31, defn, 63, '*')
		if(equali(term, argv1))
		{	
			//client_print(id,print_chat, "found something.")
			client_print(0, print_chat, "[Dictionary %s] %s = %s", VERSION, term, defn)
			//found = 1
			break
		}
	}
	/*if(found == 0)
	{	
		client_print(id, print_chat,"Error: Term not found.")	
	}*/
	return PLUGIN_HANDLED
}
