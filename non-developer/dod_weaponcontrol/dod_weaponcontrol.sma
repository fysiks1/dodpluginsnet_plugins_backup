/* Plugin generated by AMXX-Studio 
// Now uses pcvars instead of cvars for the plugin's variables.
// Also now uses client connect and disconnect messages, rather than team join.
//
// CVARS:
// dod_wc_num <#> - controls number of players before weapons are allowed
// dod_wc_snipers <#> - controls number of snipers each team can have when players # reached
// dod_wc_mgs <#> - same as above for Machine Guns
// dod_wc_britheavy <1/0> - controls whether or not the Bren is considered an MG. 1 = MG, 0 = HEAVY
// This will turn on or off the regulation of that weapon by the plugin.
// Also, added new concmd: dod_wc_check - will run the check function so when you change a cvar can update the limits.
*/


#include <amxmodx>
#include <amxmisc>
#include <dodx>
#include <dodfun>

#define PLUGIN "Weapon Control"
#define VERSION "1.1"
#define AUTHOR "Cpt. Hood [501st PIR]"

new p_num, p_snipers, p_mgs, p_britheavy

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_concmd("dod_wc_on", "weaplimit", ADMIN_LEVEL_C, "# of players before sniper/mg")
	p_num = register_cvar("dod_wc_num", "10")
	p_snipers = register_cvar("dod_wc_snipers", "1") //number of snipers to allow per team
	p_mgs = register_cvar("dod_wc_mgs", "1") // number of heavy weapons to allow per team
	p_britheavy = register_cvar("dod_wc_britheavy", "1") //controls whether heavy=mg, default is YES)
	register_concmd("dod_wc_check", "checklimit", ADMIN_LEVEL_C, "Runs the checklimit to ensure cvars are set")
	register_event("TextMsg", "checklimit", "a", "1=3", "2=#game_joined_team", "4=Allies")
	register_event("TextMsg", "checklimit", "a", "1=3", "2=#game_joined_team", "4=Axis")
	register_event("TextMsg", "checklimit", "a", "1=3", "2=#game_joined_team", "4=Spectators")
}

public client_disconnect(id)
{
	checklimit()
}

public weaplimit(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
		return PLUGIN_HANDLED
	new arg[2]
	read_argv(1, arg, 2)
	new setting=str_to_num(arg)
	set_cvar_num("dod_wc_num", setting)
	client_print(0, print_chat, "[AMXX] Weapon Control has been set to %d players.", setting)
	checklimit()
	return PLUGIN_CONTINUE
}

public checklimit()
{
	new players[32], num, i
	get_players(players, num)
	new userclass
	new plrs=get_playersnum()
	//spectators don't get counted! evil spectators. bad.
	for(i=0;i<num;i++)
	{
		if(get_user_team(players[i])==3)
		{
			plrs--
		}
	}
	
	if(plrs<get_pcvar_num(p_num))
	{
		set_cvar_num("mp_limitalliesspring",0)
		set_cvar_num("mp_limitallies30cal",0)
		set_cvar_num("mp_limitaxisscopedkar",0)
		set_cvar_num("mp_limitaxismg42",0)
		set_cvar_num("mp_limitaxismg34",0)
		set_cvar_num("mp_limitbritsniper",0)
		if(get_pcvar_num(p_britheavy)==1)
		{
			set_cvar_num("mp_limitbritmg",0)
		}
		
		for(i=0;i<num;i++)
		{
			userclass=dod_get_user_class(players[i])
			switch(userclass)
			{
				case 5:
				{
					dod_set_user_class(players[i],1)
				}
				case 7:
				{
					dod_set_user_class(players[i],1)
				}
				case 14:
				{
					dod_set_user_class(players[i],10)
				}
				case 17:
				{
					dod_set_user_class(players[i],10)
				}
				case 18:
				{
					dod_set_user_class(players[i],10)
				}
				case 23:
				{
					dod_set_user_class(players[i],21)
				}
				default:
				{
					return PLUGIN_CONTINUE
				}
			}
			//extra check for british MG since can be heavy or MG
			if(userclass==24&&get_pcvar_num(p_britheavy)==1)
			{
				dod_set_user_class(players[i],21)
			}
		}
	}
	if(plrs>=get_cvar_num("dod_wc_num"))
	{
		set_cvar_num("mp_limitalliesspring", get_pcvar_num(p_snipers))
		set_cvar_num("mp_limitallies30cal", get_pcvar_num(p_mgs))
		set_cvar_num("mp_limitaxisscopedkar",get_pcvar_num(p_snipers))
		set_cvar_num("mp_limitaxismg42",get_pcvar_num(p_mgs))
		set_cvar_num("mp_limitaxismg34",get_pcvar_num(p_mgs))
		set_cvar_num("mp_limitbritsniper",get_pcvar_num(p_snipers))
		if(get_pcvar_num(p_britheavy)==1)
		set_cvar_num("mp_limitbritmg",get_pcvar_num(p_mgs))
	}
	return PLUGIN_HANDLED
}
