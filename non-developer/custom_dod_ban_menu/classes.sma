/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <nvault>

#define PLUGIN "Member & Admin Class"
#define VERSION "1.0"
#define AUTHOR "uxMal"


new mAdminMenu // Menu
new mcbAdminMenu // Menu Callback

new mMemberMenu // Menu
new mcbMemberMenu // Menu Callback
new playermenu;
new unbanmenu;

new menudata[33][33];
new bantime[33];
new banneddata[33][33][32];

new filebanned[201];
new userfile[256];

static const VAULTNAME[] = "BannedUsers";
new vault;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	/* Menu MemberMenu */
	/* Use menu_display(id, mMemberMenu, 0) to show the menu to an user. */
	mMemberMenu = menu_create("BanMenu", "mh_MemberMenu")
	mcbMemberMenu = menu_makecallback("mcb_MemberMenu")
	menu_additem(mMemberMenu, "Ban 5 min", "ma_MemberMenu", ADMIN_ALL, mcbMemberMenu)
	menu_additem(mMemberMenu, "Ban 1 day", "ma_MemberMenu", ADMIN_ALL, mcbMemberMenu)
	menu_additem(mMemberMenu, "Ban 2 weeks", "ma_MemberMenu", ADMIN_ALL, mcbMemberMenu)
	/* Menu End */

	/* Menu AdminMenu */
	/* Use menu_display(id, mAdminMenu, 0) to show the menu to an user. */
	mAdminMenu = menu_create("BanMenu", "mh_AdminMenu")
	mcbAdminMenu = menu_makecallback("mcb_AdminMenu")
	menu_additem(mAdminMenu, "Ban 5 min", "ma_AdminMenu", ADMIN_ALL, mcbAdminMenu)
	menu_additem(mAdminMenu, "Ban 1 day", "ma_AdminMenu", ADMIN_ALL, mcbAdminMenu)
	menu_additem(mAdminMenu, "Ban 2 weeks", "ma_AdminMenu", ADMIN_ALL, mcbAdminMenu)
	menu_additem(mAdminMenu, "Permaban STEAM ID", "ma_AdminMenu", ADMIN_ALL, mcbAdminMenu)
	menu_additem(mAdminMenu, "Permaban IP(buggy, and not neccessary)", "ma_AdminMenu", ADMIN_ALL, mcbAdminMenu)
	/* Menu End */
	playermenu = menu_create("Choose a Player","mh_playermenu");
	unbanmenu = menu_create("Choose a Player to unban","mh_unbanmenu");
	
	register_concmd("amx_setclass","setclass",_,"<#userid|name>");
	register_concmd("amx_removeban","user_unban",ADMIN_BAN,"<steamid>");
	register_concmd("amx_classmenu","check_menu");
	register_clcmd("say /banmenu","check_menu");
	register_clcmd("say_team /banmenu","check_menu");
	
	format(filebanned,200,"banned.cfg"); 
	get_configsdir(userfile,255);
	format(userfile,255,"%s/users.ini",userfile);
}


/* Menu MemberMenu */

public mh_MemberMenu(id, menu, item) {
	/* This event is called when someone presses a key on this menu */
	switch(item) {
	case 0: players_menu(id,5);	
	case 1: players_menu(id,1440);
	case 2: players_menu(id,20160);
	}
}

public ma_MemberMenu(id) {
	/* This event is called when an item was selected */
	
	}

public mcb_MemberMenu(id, menu, item) {
	/* This is the callback-event, here you can set items enabled or disabled. */
	/* If you want to enable an item, use: return ITEM_ENABLED */
	/* If you want to disable an item, use: return ITEM_DISABLED */
}

public check_menu(id) {
if(access(id,ADMIN_LEVEL_B)) menu_display(id, mAdminMenu, 0);	
else if(access(id,ADMIN_LEVEL_C))  menu_display(id, mMemberMenu, 0);
else client_print(id,print_chat,"[AMXX] Sorry you have insufficient rights!");
}


/* Menu AdminMenu */

public mh_AdminMenu(id, menu, item) {
	switch(item) {
	case 0: players_menu(id,300);	
	case 1: players_menu(id,86400);
	case 2: players_menu(id,1209600)
	case 3: players_menu(id,0);
	case 4: players_menu(id,1337);
	
	}
}

public ma_AdminMenu(id) {
	/* This event is called when an item was selected */
}

public mcb_AdminMenu(id, menu, item) {
	/* This is the callback-event, here you can set items enabled or disabled. */
	/* If you want to enable an item, use: return ITEM_ENABLED */
	/* If you want to disable an item, use: return ITEM_DISABLED */
}

public players_menu(id,time) {
new Players[32];
new name[51];
new plcount;

bantime[id]=time;
get_players(Players,plcount,"h");
menu_destroy(playermenu);


playermenu = menu_create("Choose a Player","mh_playermenu");
for(new i=0;i<plcount;i++) {
//if(Players[i]!=id) {
menudata[id][i]=Players[i];
get_user_name(Players[i],name,50);
menu_additem(playermenu,name);	
//}
}
menu_display(id,playermenu,0);
}

public mh_playermenu(id,menu,item) {
if(bantime[id]!=1337) {
user_ban(menudata[id][item],bantime[id],id);
if(access(menudata[id][item],ADMIN_IMMUNITY)) {
client_print(id,3,"Player has Immunity!");	
}
else if(is_user_bot(menudata[id][item])) {
client_print(id,3,"Player is a Bot!");		
}

}
else {
server_cmd("amx_banip #%i %d",get_user_userid(menudata[id][item]),0);	

if(access(menudata[id][item],ADMIN_IMMUNITY)) {
client_print(id,3,"Player has Immunity!");	
}
else if(is_user_bot(menudata[id][item])) {
client_print(id,3,"Player is a Bot!");		
}
}
}

public setclass(id,level,cid) {

if(id==0) return;
if(!access(id,ADMIN_BAN)) return;
new arg[32],arg2[2],lvl;
read_args(arg,31);
read_argv(2,arg2,1);
lvl = str_to_num(arg2);
if(equal(arg,"") || lvl > 2 || lvl < 0) {
client_print(id,print_console,"Usage: amx_giveclass <name|#userid> <0|1|2> 0 = Remove class 1= User Class 2 = Admin class");	
return;
}
read_argv(1,arg,31);

new targetid = cmd_target(id,arg,2);
if(targetid!=0) {
new authid[32];
get_user_authid(targetid,authid,31);
new name1[32],name2[32];
get_user_name(id,name1,31);
get_user_name(targetid,name2,31);
switch(lvl) {
case 0: {
	if(access(targetid,ADMIN_LEVEL_B) || access(targetid,ADMIN_LEVEL_C)) {
	removeflags(targetid,name1,name2,authid,2);
	}
	
	client_print(0,print_chat,"[AMXX] Admin %s removed %s class",name1,name2); 
	
}
case 1: { 
	if(access(targetid,ADMIN_LEVEL_B)) {
	removeflags(targetid,name1,name2,authid,1);	
	}
	if(!access(targetid,ADMIN_LEVEL_C)) {
	addflags(targetid,name1,name2,authid,1);
	}
	client_print(0,print_chat,"[AMXX] Admin %s added %s to UserClass",name1,name2);
	}
case 2: {
	if(!access(targetid,ADMIN_LEVEL_B)) {
	addflags(targetid,name1,name2,authid,2);	
	}
	client_print(0,print_chat,"[AMXX] Admin %s added %s to AdminClass",name1,name2);
	}
}
}
else {
//client_print(id,print_console,"Client with that name or userid not found.");	
}
server_cmd("amx_reloadadmins");
}
/*
public unban_menu(id) {
	if(!file_exists(filebanned) || file_size(filebanned,1) == 0) {
		client_print(id,print_chat,"[AMXX] Error ! Could not find banned.cfg or the file is empty");	
		return PLUGIN_CONTINUE;
	}
	menu_destroy(unbanmenu);
	unbanmenu = menu_create("Choose a Player to unban","mh_unbanmenu");
	new line = 0;
	new txtlen,readdata[128],art[8],btime[8],bannedid[32],Float:bannedtime;
	new mname[49];
	while(read_file(filebanned,line,readdata,127,txtlen) > 0)
	{
		if(equal(readdata,"")) break;
		parse(readdata,art,7,btime,7,bannedid,31);
		bannedtime=str_to_float(btime);
		if(bannedtime==0) format(mname,48,"%s Permanent",bannedid); 
		else format(mname,48,"%s Time: %f min",bannedid,bannedtime);
		menu_additem(unbanmenu,mname);
		banneddata[id][line]=bannedid;
		client_print(id,print_chat,"%s %i %i",banneddata[id][line],id,line);
		line++;
	}   
	menu_display(id,unbanmenu,0);
	return PLUGIN_CONTINUE;
}

public mh_unbanmenu(id,menu,item) {
server_cmd("amx_unban %s",banneddata[id][item]);	
client_print(id,print_chat,"%s %i %i",banneddata[id][item],id,item);
}
*/
public removeflags(targetid,name1[],name2[],authid[],flags) {

	new readdata[128],parsedata[128],crap[2],txtlen;
	new line=0;
	while(read_file(userfile,line,readdata,127,txtlen) > 0)
	{
		if(!equal(readdata[0],";")) {
		if(contain(readdata,authid) != -1) {
		strtok(readdata,crap,1,parsedata,127);
		strtok(parsedata,crap,1,parsedata,127);
		strtok(parsedata,parsedata,127,crap,1);
		strtok(parsedata,crap,1,parsedata,127,'"');
		strtok(parsedata,parsedata,127,crap,1,'"');
		if(flags==2) {
		if(access(targetid,ADMIN_LEVEL_C)) {
		strtok(parsedata,parsedata,127,readdata,127,'o');
		format(parsedata,127,"%s%s",parsedata,readdata);
		}
		}
		if(flags==1 || flags==2) {
		if(access(targetid,ADMIN_LEVEL_B)) {
		strtok(parsedata,parsedata,127,readdata,127,'n');
		format(parsedata,127,"%s%s",parsedata,readdata);
		}
		}
		new writedata[128];
		format(writedata,127,"^"%s^" ^"^" ^"%s^" ^"ce^"",authid,parsedata);
		write_file(userfile,writedata,line);
		break;
		}
		}
		line++;
	}
	
}

public addflags(targetid,name1[],name2[],authid[],flags) {

	new readdata[128],parsedata[128],crap[2],txtlen,check = 0;
	new line=0;
	while(read_file(userfile,line,readdata,127,txtlen) > 0)
	{
		if(!equal(readdata[0],";")) {
		if(contain(readdata,authid) != -1) {
		strtok(readdata,crap,1,parsedata,127);
		strtok(parsedata,crap,1,parsedata,127);
		strtok(parsedata,parsedata,127,crap,1);
		strtok(parsedata,crap,1,parsedata,127,'"');
		strtok(parsedata,parsedata,127,crap,1,'"');
		if(flags==2) {
		format(parsedata,127,"%s%s",parsedata,"n");
		}
		if(flags==1 || flags==2) {
		format(parsedata,127,"%s%s",parsedata,"o");
		}
		new writedata[128];
		format(writedata,127,"^"%s^" ^"^" ^"%s^" ^"ce^"",authid,parsedata);
		write_file(userfile,writedata,line);
		check=1;
		break;
		}
		}
		line++;
	}
	if(check==0) {
	if(flags==2) {
		server_cmd("amx_addadmin #%i n",get_user_userid(targetid));
	}
	if(flags==1) {
		server_cmd("amx_addadmin #%i o",get_user_userid(targetid));	
	}
	
	}
}

public user_ban(id,bantime,aid) {
	if(is_user_bot(id)) return;

	new authid[33],nick[33],userid,nick2[33],authid2[33];
	get_user_authid(id,authid,32);
	get_user_name(id,nick,32);
	get_user_authid(aid,authid2,32);
	get_user_name(aid,nick2,32);
	userid = get_user_userid(id);

	vault = nvault_open(VAULTNAME);
	if(vault == INVALID_HANDLE) {
		server_print("Error opening nVault file 'BannedUsers'");
	}
		
	new writedata[128];
	formatex(writedata,127,"%s %i",nick,bantime);
	nvault_set(vault,authid,writedata);
	nvault_close(vault);
	log_amx("%s (%s) was banned for %i secs by %s (%s)",nick,authid,bantime,nick2,authid2);
	server_cmd("amx_kick #%i",userid);
}

public client_authorized(id) {
	new authid[33];
	get_user_authid(id,authid,32);
	vault = nvault_open(VAULTNAME);
	if(vault == INVALID_HANDLE) {
		server_print("Error opening nVault file 'BannedUsers'");
	}
	new data[128],btime[20],tstamp,bantime;
	if(nvault_lookup(vault,authid,data,127,tstamp)) {
	strtok(data,data,127,btime,19);	
	bantime = str_to_num(btime);
	if((tstamp+bantime) >= get_systime() || bantime==0) {
	new reason[128];
	if(bantime!=0)	formatex(reason,127,"User is banned! Ban time left: %i seconds",(tstamp+bantime-get_systime()));
	else formatex(reason,127,"User is permanently banned!");
	server_cmd("amx_kick #%i %s",get_user_userid(id),reason);	
	}
	else {
		nvault_remove(vault,authid);
		nvault_close(vault);
		return;
	}
	}
	else {
	nvault_close(vault);
	return;
	}
}

public user_unban(id,level,cid) {

if (!cmd_access(id,level,cid,2))
    return PLUGIN_HANDLED	
new arg[33];    
read_argv(1,arg,32);

vault = nvault_open(VAULTNAME);
if(vault == INVALID_HANDLE) {
server_print("Error opening nVault file 'BannedUsers'");
}
new crap[2],ts;
if(nvault_lookup(vault,arg,crap,1,ts) != 0) {
nvault_remove(vault,arg);
nvault_close(vault);
new messa[65],name[32];
get_user_name(id,name,31);
formatex(messa,64,"Admin %s unbanned %s !",name,arg);
client_print(0,print_chat,"%s",messa);
log_amx("%s",messa);		
}
else {
nvault_close(vault);
client_print(id,print_chat,"No Ban found.");	
}
return;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
